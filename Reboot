Thanks ‚Äî this is another common issue when running Android inside QEMU (especially in Docker): adb reboot shuts down the emulator, but it doesn‚Äôt reboot ‚Äî it just powers off and doesn‚Äôt restart.


---

üîç Why This Happens

When you run:

adb reboot

The Android OS inside QEMU shuts down cleanly, but:

QEMU exits (because the guest told it to power off),

Docker container also stops (because QEMU was PID 1),

So the whole system shuts down.



---

‚úÖ Solutions

You have a few options depending on your goals:


---

‚úÖ 1. Auto-Restart QEMU After Shutdown

Wrap QEMU in a loop in your entrypoint.sh:

#!/bin/bash
set -e

while true; do
  echo "[INFO] Starting Android VM..."
  
  if [ -e /dev/kvm ] && [ -w /dev/kvm ]; then
    KVM_FLAG="-enable-kvm"
  else
    KVM_FLAG=""
  fi

  qemu-system-x86_64 \
    $KVM_FLAG \
    -m 2048 \
    -hda /android/android.qcow2 \
    -display gtk \
    -serial mon:stdio

  echo "[INFO] Android VM exited. Restarting in 5 seconds..."
  sleep 5
done

That way, any shutdown (including adb reboot) just causes QEMU to relaunch.

If you want to reboot instantly without delay, remove the sleep.


---

‚úÖ 2. Use adb reboot Replacement Command

Instead of using:

adb reboot

Run the reboot command directly on Android via shell:

adb shell su -c 'reboot'

If su is not present or ADB is rooted, just:

adb shell reboot

BUT: Same issue ‚Äî the Android guest will reboot, but QEMU exits. So loop is still required unless you're emulating full ACPI and catching reboot events (which is tricky).


---

‚úÖ 3. Use -no-shutdown and Catch Reboot Events

Run QEMU with:

-no-shutdown -no-reboot

This makes QEMU not exit on guest shutdown. Instead, it just pauses. You can then script it to restart.

But this requires monitor scripting, e.g., detecting system_powerdown and restarting manually via QEMU commands. This is advanced and less portable.


---

‚úÖ Final Recommendation (Simple & Works)

Use the loop-based entrypoint.sh method. It‚Äôs:

Easy to implement

Compatible with Docker and any Linux distro

Doesn‚Äôt need extra tools or event detection



---

Would you like me to provide a full Dockerfile + entrypoint.sh that:

Detects KVM

Uses GTK if possible

Restarts QEMU after adb reboot

Falls back to VNC if GUI is unavailable?


Let me know ‚Äî I can generate a plug-and-play setup for you.









Ah ‚Äî now that‚Äôs clear and important context: you're editing settings_ssaid.xml and need it to take effect. Normally, yes ‚Äî reboot is the easiest way to apply such system settings changes.


---

‚úÖ But: Can You Avoid Rebooting Entire QEMU?

Yes, there are alternative ways to reload Android system settings without fully rebooting the emulator.


---

üîÑ Option 1: Use Android Services to Reload Settings

You may be able to force Android to re-read the settings database using ADB:

adb shell content insert \
  --uri content://settings/secure \
  --bind name:s:ssaid \
  --bind value:s:<your_value>

Or use:

adb shell settings put secure android_id <your_value>

This avoids touching the XML directly.

However, if you're editing settings_ssaid.xml directly and want that change applied, try:


---

üîÑ Option 2: Restart Settings System Service (Not Guaranteed)

Sometimes restarting the system_server or just settings will pick up changes:

adb shell stop
adb shell start

This restarts the Android framework but not the entire Linux kernel. It's much faster than full reboot and often works for applying config changes like settings_ssaid.xml.

> ‚úÖ Try this first before adb reboot:



adb shell stop && adb shell start

If the file is valid and writable, this can be enough.


---

üîÑ Option 3: Use setprop to Force ID Change (Temporary)

You might be able to override the value temporarily like:

adb shell setprop persist.sys.android_id <your_value>

Note: this only works if the system is set to read from a system property, and it might not persist or affect SSAID behavior across apps.


---

üßº Option 4: Make Changes on Boot with init.rc or post-fs-data

If you must edit the XML manually, consider modifying it before boot:

Mount the disk image (android.qcow2)

Inject your edited settings_ssaid.xml

Then start the VM


Or automate this by modifying init.rc or an early-boot script.


---

üõ† Option 5: Patch Framework (if you're automating or for CTF/dev)

If this is part of a reproducible system (e.g. for automation), consider booting with your modified XML already in place to avoid rebooting.


---

‚úÖ Recommendation (No-Reboot Way to Apply SSAID Change)

If you‚Äôre directly editing settings_ssaid.xml, and you have root, try this sequence:

adb root
adb remount
adb push settings_ssaid.xml /data/system/users/0/settings_ssaid.xml
adb shell stop
adb shell start

Then verify:

adb shell settings get secure android_id

If that works: no reboot needed ‚úÖ


---

Would you like help creating a script that does this all in one go? Or integrating it into your Docker QEMU flow?
