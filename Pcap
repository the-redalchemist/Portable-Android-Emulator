To extract a Bearer token from a TLS-encrypted PCAP, given that you have the necessary secrets (e.g., a TLS key log file), your process will look something like this:


---

‚úÖ Goal:

Extract a Bearer token from decrypted HTTP traffic in a .pcap file using Python and Scapy, even if it's not always prefixed with "Bearer ".


---

üîß Requirements

1. PCAP file


2. TLS key log file (usually created via SSLKEYLOGFILE)


3. pyshark (easier for decrypted traffic than raw Scapy)


4. Python 3.6+


5. Optional: tshark installed (backend for pyshark)




---

‚úÖ Recommended Approach: Use pyshark for Decryption

üîπ Step 1: Install dependencies

pip install pyshark

Ensure tshark is installed and in your PATH.


---

üîπ Step 2: Sample Python script to extract token-like strings

import pyshark
import re

# Paths
pcap_path = 'traffic.pcap'
keylog_path = 'tls_keys.log'

# Regex for token-like strings (adjust as needed)
token_regex = re.compile(r'(Bearer\s+)?([A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+)')

# Open the capture with decryption
cap = pyshark.FileCapture(
    pcap_path,
    decode_as={'tcp.port==443': 'ssl'},
    override_prefs={
        'tls.keylog_file': keylog_path,
        'ssl.desegment_ssl_records': 'TRUE',
        'ssl.desegment_ssl_application_data': 'TRUE',
    },
    use_json=True,
    include_raw=True
)

# Search through packets
for pkt in cap:
    try:
        if hasattr(pkt, 'http') and hasattr(pkt.http, 'file_data'):
            data = pkt.http.file_data.binary_value.decode(errors='ignore')

            # Look for token patterns
            for match in token_regex.finditer(data):
                full_token = match.group(0)
                print(f'[+] Found token candidate: {full_token}')
    except Exception as e:
        continue

cap.close()


---

üîç Notes

The regex pattern above is tailored for JWT tokens (which are common Bearer tokens).

It can match:

Bearer abc.def.ghi

or just abc.def.ghi without the Bearer prefix.



You can customize the regex to look for tokens inside headers like:

Authorization: Bearer ...

or even JSON like "access_token": "..."




---

üîÑ Alternative with Wireshark GUI

1. Open the PCAP in Wireshark.


2. Go to Edit > Preferences > Protocols > TLS and set the (Pre)-Master-Secret log filename.


3. Use tcp.stream eq N to inspect each HTTP request/response.


4. Search for Authorization, access_token, token, or Bearer using the Find Packet (Ctrl+F).




---

üõ†Ô∏è If You Must Use Scapy

Scapy cannot natively decrypt TLS. You‚Äôd need to:

Pre-decrypt the stream using tshark or Wireshark CLI (tshark -o tls.keylog_file:...)

Or use external tools like ssldump or wireshark to dump decrypted payloads, then process them in Scapy.



---

Would you like me to help modify the regex to fit your specific use case (e.g., if it's not JWT-shaped)? Or help decode the PCAP manually if you upload it (with key log file)?







@@@@@@@


Perfect! Since you can already decrypt TLS traffic using Scapy, you‚Äôre ahead of the curve. The next step is to search for token-like strings within the decrypted application data (likely HTTP or JSON), and extract anything that might be a Bearer token‚Äîeven if it's not prefixed with Bearer.


---

‚úÖ Goal (Refined):

Use Scapy to decrypt TLS (you already have it working).

Extract potential Bearer tokens from the decrypted payloads.

Be flexible: token may appear with or without Bearer prefix.



---

üîç Step-by-step Plan:

1. Decrypt and reassemble the TCP streams using Scapy.


2. Look into the application data (TLS layer decrypted payloads).


3. Use regex to match token-like strings:

Match Bearer <token> if present.

Also match tokens alone (e.g., eyJhbGciOi...).





---

üîê Regex for JWT/Bearer Tokens

Most Bearer tokens are JWTs: three base64url-encoded segments separated by dots.

import re

# Match optional 'Bearer ' and JWT token pattern
token_regex = re.compile(
    r'(Bearer\s+)?([A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+)'
)


---

üêç Scapy Script Skeleton

Assuming you already have decrypted records:

from scapy.all import *
import re

# JWT/Bearer-like token regex
token_regex = re.compile(r'(Bearer\s+)?([A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+)')

# Read decrypted PCAP (or decrypt inline if you have TLS secrets)
packets = rdpcap('decrypted_tls.pcap')  # Replace with your decrypted pcap

token_candidates = set()

for pkt in packets:
    if Raw in pkt:
        payload = pkt[Raw].load
        try:
            # Attempt to decode to string
            decoded = payload.decode(errors='ignore')

            # Search for token candidates
            for match in token_regex.finditer(decoded):
                full_match = match.group(0)
                token_only = match.group(2)
                print(f"[+] Found token: {full_match}")
                token_candidates.add(full_match)

        except Exception as e:
            continue

print("\n=== Unique Token Candidates ===")
for token in token_candidates:
    print(token)


---

üß™ Extra Matching (Optional)

If you suspect the token might appear as a JSON field (e.g., "access_token": "..."), add another regex:

json_token_regex = re.compile(r'"(?:access_token|token|auth)?"\s*:\s*"([^"]+)"')

Then combine both regex searches.


---

üß† Tips

If you see Authorization: headers, that‚Äôs a good place to look.

You can dump the entire decrypted content to a file first and grep manually as a quick check.

Want help writing a tshark preprocessor to decrypt and save clean HTTP data for easier Scapy analysis? I can help with that too.



---

Would you like help bundling this into a CLI tool or searching for token usage in responses too (not just requests)?
